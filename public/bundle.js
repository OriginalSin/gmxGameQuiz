var app = (function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function addLoc(element, file, line, column, char) {
		element.__svelte_meta = {
			loc: { file, line, column, char }
		};
	}

	function run(fn) {
		fn();
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createComment() {
		return document.createComment('');
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function setData(text, data) {
		text.data = '' + data;
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function destroyDev(detach) {
		destroy.call(this, detach);
		this.destroy = function() {
			console.warn('Component was already destroyed');
		};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function setDev(newState) {
		if (typeof newState !== 'object') {
			throw new Error(
				this._debugName + '.set was called without an object of data key-values to update.'
			);
		}

		this._checkReadOnly(newState);
		set.call(this, newState);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var protoDev = {
		destroy: destroyDev,
		get,
		fire,
		on,
		set: setDev,
		_recompute: noop,
		_set,
		_stage,
		_mount,
		_differs
	};

	/* src\Map.html generated by Svelte v2.13.5 */

	const serverBase = window.serverBase || '//maps.kosmosnimki.ru/';

	function data() {
		return {
			layerGame: null,
			questions: null,
			permalink: null,
			map: null
		}
	}
	var methods = {
		styleHook(it) {
			let {question} = this.get();
			return question && it.id === question.id ? {} : null;
		},
		createMap(it) {
			let app = it.app || {},
				gmxMap = app.gmxMap || {},
				state = it.state || {},
				mapID = gmxMap.mapID || 'A557835E1B2344479C092FBB0158B529',
				layerID = gmxMap.layerID || '5F2A707A119A45EF9BD490187E909830',
				apiKey = gmxMap.apiKey,
				pos = state.map ? state.map.position : {};

			var osm = L.tileLayer('//tilessputnik.ru/{z}/{x}/{y}.png', {
				maxZoom: 18
			});

			let map = new L.Map('map', {
				layers: [osm],
				center: new L.LatLng(pos.y || 26, pos.x || 83),
				zoom: pos.z || 7
			});

			map.gmxControlsManager.init();
			
			L.gmx.loadMap(mapID, {leafletMap: map}).then(function(gmxMap) {
				gmxMap.layers.forEach(function(it) {
					map.removeLayer(it);
				});
				let layerGame = gmxMap.layersByID[layerID] || gmxMap.layers[0];
				if (layerGame) {
					this.set({layerGame: layerGame});
					let dm = layerGame.getDataManager();
					let ob = dm.addObserver({
						type: 'resend',
						layerID: layerID,
						callback: function (data) {
							if (data.count) {
								this.set({questions: data});
							}
							console.log('data', data);
						}.bind(this)
					});
					layerGame.setStyleHook(this.styleHook.bind(this));
					map.addLayer(layerGame);
				}
				// console.log('gmxMap', gmxMap);
			}.bind(this));
			this.set({map: map});
		}
	};

	function onstate({ changed, current, previous }) {
	// console.log('Map in onstate', changed, current, previous);
		if (changed.permalink && current.permalink) {
			this.createMap(current.permalink);
			//this.getPermalink(current.urlParams.config)
		}
	}
	function onupdate({ changed, current, previous }) {
		// this fires after oncreate, and after every state change
		// once the DOM is synchronised with the data
	// console.log(`Ma55ppppp The DOM has been updated`, changed, current, previous);
	}
	const file = "src\\Map.html";

	function create_main_fragment(component, ctx) {
		var div, current;

		return {
			c: function create() {
				div = createElement("div");
				div.id = "map";
				addLoc(div, file, 0, 0, 0);
			},

			m: function mount(target, anchor) {
				insert(target, div, anchor);
				current = true;
			},

			p: noop,

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: run,

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(div);
				}
			}
		};
	}

	function Map(options) {
		this._debugName = '<Map>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign(data(), options.data);
		this._intro = !!options.intro;

		this._handlers.state = [onstate];
		this._handlers.update = [onupdate];

		onstate.call(this, { changed: assignTrue({}, this._state), current: this._state });

		this._fragment = create_main_fragment(this, this._state);

		this.root._oncreate.push(() => {
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}

		this._intro = true;
	}

	assign(Map.prototype, protoDev);
	assign(Map.prototype, methods);

	Map.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src\App.html generated by Svelte v2.13.5 */

	const serverBase$1 = window.serverBase || '//maps.kosmosnimki.ru/';
	function props({ layerGame }) {
		return layerGame ? layerGame.getGmxProperties() : {};
	}

	function data$1() {
		return {
			urlParams: {},
			props: {},
			dropdownMenu: [
				{ name: 'refresh', title: 'Refresh' },
				{ name: 'link', title: 'Share' },
				{ name: 'magic', title: 'Wizard' }
			],
			map: null,
			permalink: null,
			questCount: 0
		}
	}
	var methods$1 = {
		nextQuestion() {
			let {questions} = this.get(),
				len = questions.added.length,
				it = questions.added[Math.floor(len * Math.random())];
			this.set({questCount: 10, question: it});
	console.log('startGame', it);
		},
		test(node, flag) {
	// console.log('editTrigger', node, flag);
			let parentNode = node.parentNode,
				lastChild = parentNode.parentNode.lastChild;
			if (flag) {
				lastChild.previousElementSibling.classList.remove('hidden');
				lastChild.classList.add('hidden');
			} else {
				lastChild.previousElementSibling.classList.add('hidden');
				lastChild.classList.remove('hidden');
			}
			parentNode.firstChild.classList.remove('checked');
			parentNode.lastChild.classList.remove('checked');
			node.classList.add('checked');
		},
		getPermalink(id) {
			return fetch(serverBase$1 + 'TinyReference/Get.ashx?WrapStyle=None&id=' + id, {
					mode: 'cors',
					credentials: 'include'
				})
				.then(res => res.json())
				.then(json => {
					if (json.Status === 'ok') {
						let out = json.Result ? JSON.parse(json.Result) : {};
						this.set({permalink: out, confStr: JSON.stringify(out, null, 2)});
					}
	// console.log('TinyReference ____ ', json);
				});
				// .catch(err => console.log(err));
		}
	};

	function oncreate() {
		// this fires when the component has been
		// rendered to the DOM
		// console.log('in oncreate');
		
	}
	function onstate$1({ changed, current, previous }) {
	// console.log('in onstate', changed, current, previous);
		if (changed.urlParams) {
			this.getPermalink(current.urlParams.config);
		}
	}
	function onupdate$1({ changed, current, previous }) {
		// console.log('in onupdate', changed, current, previous);
		if (changed.confStr) ;
	}
	const file$1 = "src\\App.html";

	function create_main_fragment$1(component, ctx) {
		var map_updating = {}, text, if_block_anchor, current;

		var map_initial_data = { permalink: ctx.permalink };
		if (ctx.layerGame  !== void 0) {
			map_initial_data.layerGame = ctx.layerGame ;
			map_updating.layerGame = true;
		}
		if (ctx.questCount  !== void 0) {
			map_initial_data.questCount = ctx.questCount ;
			map_updating.questCount = true;
		}
		if (ctx.questions  !== void 0) {
			map_initial_data.questions = ctx.questions ;
			map_updating.questions = true;
		}
		if (ctx.question   !== void 0) {
			map_initial_data.question = ctx.question  ;
			map_updating.question = true;
		}
		var map = new Map({
			root: component.root,
			store: component.store,
			data: map_initial_data,
			_bind(changed, childState) {
				var newState = {};
				if (!map_updating.layerGame && changed.layerGame) {
					newState.layerGame = childState.layerGame;
				}

				if (!map_updating.questCount && changed.questCount) {
					newState.questCount = childState.questCount;
				}

				if (!map_updating.questions && changed.questions) {
					newState.questions = childState.questions;
				}

				if (!map_updating.question && changed.question) {
					newState.question = childState.question;
				}
				component._set(newState);
				map_updating = {};
			}
		});

		component.root._beforecreate.push(() => {
			map._bind({ layerGame: 1, questCount: 1, questions: 1, question: 1 }, map.get());
		});

		function select_block_type_1(ctx) {
			if (!ctx.questCount) return create_if_block;
			return create_if_block_3;
		}

		var current_block_type = select_block_type_1(ctx);
		var if_block = current_block_type(component, ctx);

		return {
			c: function create() {
				map._fragment.c();
				text = createText("\r\n");
				if_block.c();
				if_block_anchor = createComment();
			},

			m: function mount(target, anchor) {
				map._mount(target, anchor);
				insert(target, text, anchor);
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},

			p: function update(changed, _ctx) {
				ctx = _ctx;
				var map_changes = {};
				if (changed.permalink) map_changes.permalink = ctx.permalink;
				if (!map_updating.layerGame && changed.layerGame) {
					map_changes.layerGame = ctx.layerGame ;
					map_updating.layerGame = ctx.layerGame  !== void 0;
				}
				if (!map_updating.questCount && changed.questCount) {
					map_changes.questCount = ctx.questCount ;
					map_updating.questCount = ctx.questCount  !== void 0;
				}
				if (!map_updating.questions && changed.questions) {
					map_changes.questions = ctx.questions ;
					map_updating.questions = ctx.questions  !== void 0;
				}
				if (!map_updating.question && changed.question) {
					map_changes.question = ctx.question  ;
					map_updating.question = ctx.question   !== void 0;
				}
				map._set(map_changes);
				map_updating = {};

				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.d(1);
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: function outro(outrocallback) {
				if (!current) return;

				if (map) map._fragment.o(outrocallback);
				current = false;
			},

			d: function destroy$$1(detach) {
				map.destroy(detach);
				if (detach) {
					detachNode(text);
				}

				if_block.d(detach);
				if (detach) {
					detachNode(if_block_anchor);
				}
			}
		};
	}

	// (5:1) {#if !layerGame}
	function create_if_block_1(component, ctx) {
		var div, div_1, div_2, div_3, div_4;

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				div_2 = createElement("div");
				div_3 = createElement("div");
				div_4 = createElement("div");
				div_1.className = "svelte-jz9xvi";
				addLoc(div_1, file$1, 5, 28, 211);
				div_2.className = "svelte-jz9xvi";
				addLoc(div_2, file$1, 5, 39, 222);
				div_3.className = "svelte-jz9xvi";
				addLoc(div_3, file$1, 5, 50, 233);
				div_4.className = "svelte-jz9xvi";
				addLoc(div_4, file$1, 5, 61, 244);
				div.className = "lds-ellipsis svelte-jz9xvi";
				addLoc(div, file$1, 5, 2, 185);
			},

			m: function mount(target, anchor) {
				insert(target, div, anchor);
				append(div, div_1);
				append(div, div_2);
				append(div, div_3);
				append(div, div_4);
			},

			p: noop,

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(div);
				}
			}
		};
	}

	// (7:1) {:else}
	function create_if_block_2(component, ctx) {
		var h1, text_value = ctx.props.title, text, text_1, p, text_2_value = ctx.props.description, text_2, text_3, button, text_4;

		function click_handler(event) {
			component.nextQuestion({questCount: 10});
		}

		return {
			c: function create() {
				h1 = createElement("h1");
				text = createText(text_value);
				text_1 = createText("\r\n\t\t");
				p = createElement("p");
				text_2 = createText(text_2_value);
				text_3 = createText("\r\n\t\t");
				button = createElement("button");
				text_4 = createText("Начать");
				h1.className = "title";
				addLoc(h1, file$1, 7, 2, 275);
				p.className = "description";
				addLoc(p, file$1, 8, 2, 315);
				addListener(button, "click", click_handler);
				button.className = "start";
				addLoc(button, file$1, 9, 2, 365);
			},

			m: function mount(target, anchor) {
				insert(target, h1, anchor);
				append(h1, text);
				insert(target, text_1, anchor);
				insert(target, p, anchor);
				append(p, text_2);
				insert(target, text_3, anchor);
				insert(target, button, anchor);
				append(button, text_4);
			},

			p: function update(changed, ctx) {
				if ((changed.props) && text_value !== (text_value = ctx.props.title)) {
					setData(text, text_value);
				}

				if ((changed.props) && text_2_value !== (text_2_value = ctx.props.description)) {
					setData(text_2, text_2_value);
				}
			},

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(h1);
					detachNode(text_1);
					detachNode(p);
					detachNode(text_3);
					detachNode(button);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	// (2:0) {#if !questCount}
	function create_if_block(component, ctx) {
		var div, text, div_1;

		function select_block_type(ctx) {
			if (!ctx.layerGame) return create_if_block_1;
			return create_if_block_2;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		return {
			c: function create() {
				div = createElement("div");
				text = createText("\r\n\t");
				div_1 = createElement("div");
				if_block.c();
				div.className = "scrim svelte-jz9xvi";
				addLoc(div, file$1, 2, 1, 112);
				div_1.className = "controls svelte-jz9xvi";
				addLoc(div_1, file$1, 3, 1, 140);
			},

			m: function mount(target, anchor) {
				insert(target, div, anchor);
				insert(target, text, anchor);
				insert(target, div_1, anchor);
				if_block.m(div_1, null);
			},

			p: function update(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.d(1);
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(div_1, null);
				}
			},

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(div);
					detachNode(text);
					detachNode(div_1);
				}

				if_block.d();
			}
		};
	}

	// (13:0) {:else}
	function create_if_block_3(component, ctx) {
		var div, text_value = ctx.question ? ctx.question.properties[1] : '', text;

		return {
			c: function create() {
				div = createElement("div");
				text = createText(text_value);
				div.className = "question svelte-jz9xvi";
				addLoc(div, file$1, 13, 1, 473);
			},

			m: function mount(target, anchor) {
				insert(target, div, anchor);
				append(div, text);
			},

			p: function update(changed, ctx) {
				if ((changed.question) && text_value !== (text_value = ctx.question ? ctx.question.properties[1] : '')) {
					setData(text, text_value);
				}
			},

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(div);
				}
			}
		};
	}

	function App(options) {
		this._debugName = '<App>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign(data$1(), options.data);
		this._recompute({ layerGame: 1 }, this._state);
		if (!('layerGame' in this._state)) console.warn("<App> was created without expected data property 'layerGame'");
		if (!('permalink' in this._state)) console.warn("<App> was created without expected data property 'permalink'");
		if (!('questCount' in this._state)) console.warn("<App> was created without expected data property 'questCount'");
		if (!('questions' in this._state)) console.warn("<App> was created without expected data property 'questions'");
		if (!('question' in this._state)) console.warn("<App> was created without expected data property 'question'");
		this._intro = !!options.intro;

		this._handlers.state = [onstate$1];
		this._handlers.update = [onupdate$1];

		onstate$1.call(this, { changed: assignTrue({}, this._state), current: this._state });

		this._fragment = create_main_fragment$1(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}

		this._intro = true;
	}

	assign(App.prototype, protoDev);
	assign(App.prototype, methods$1);

	App.prototype._checkReadOnly = function _checkReadOnly(newState) {
		if ('props' in newState && !this._updatingReadonlyProperty) throw new Error("<App>: Cannot set read-only property 'props'");
	};

	App.prototype._recompute = function _recompute(changed, state) {
		if (changed.layerGame) {
			if (this._differs(state.props, (state.props = props(state)))) changed.props = true;
		}
	};

	let pars = (() => {
		let p = {};
		location.search.substr(1).split('&').forEach((it) => {
			let arr = it.split('=');
			p[arr[0]] = arr[1];
		});
		return p;
	})();

	const app = new App({
		target: document.body,
		//target: document.getElementsByClassName('editor-sidebarContainer')[0] || document.body,
		data: {
			urlParams: pars,
			name: 'world'
		}
	});

	return app;

}());
//# sourceMappingURL=bundle.js.map
